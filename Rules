#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.


# static
#

compile '/static/*' do
  # don't compile static
end

route '/static/*' do
  item.identifier.chop['/static/'.length-1..-1]
end

# partials

compile '/assets/(javascripts|stylesheets)/(vendor|site)/.+' do
  next
end

route '/assets/(javascripts|stylesheets)/(vendor|site)/.*' do
  nil
end

# stylesheets/javascripts

compile '/assets/(javascripts|stylesheets)/(main|pages/*)' do
  filter :sprockets, {
                       :css_compressor => :sass,
                       :js_compressor => :uglifier
                   }
end

route '/assets/(javascripts|stylesheets)/(main|pages/*)' do
  Nanoc::Sprockets::Helper.asset_path(item)
end

# Don't include any library files, as they should be included
# in the manifest files (main.js, main.css)
route %r{/assets/(javascripts|stylesheets)/.*} do
  next
end

# extra (humans, robots and htaccess)

compile '/(humans|robots|htaccess)/' do
  filter :erb
end

route '/(humans|robots)/' do
  ext, kind = split_ext(item[:extension], default: 'txt')
  item.identifier.chop + '.' + ext
end

route '/htaccess/' do
  '/.htaccess'
end

# bower

compile '/bower/*' do
  # don't compile static
end

route '/bower/*' do
  nil
end

# fallback

compile '*' do
  if item.binary?
    next
  else
    ext, kind = split_ext(item[:extension], default: 'html')

    case kind
      when 'erb'
        filter :erb
      when 'haml'
        filter :haml
      when 'md'
        filter :smartlink
        filter :kramdown
    end

    layout item[:layout] || 'raw'

    filter :relativize_paths, :type => :html
  end
end

route %r{/root/*} do
  if not item.binary?
    ext, kind = split_ext(item[:extension], default: 'html')
    internationalized_identifier_for(item).chop + '.' + ext
  else
    nil
  end
end

route '*' do
  if item.binary?
    item.identifier.chop + '.' + item[:extension]
  else
    ext, kind = split_ext(item[:extension], default: 'html')
    case ext
      when 'html'
        item.identifier + 'index' + '.' + ext
      else
        item.identifier.chop + '.' + ext
    end
  end
end

layout '*', :haml, { :format => :html5, :ugly => true }